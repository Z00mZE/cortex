// Code generated by entc, DO NOT EDIT.

package session

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the session type in the database.
	Label = "session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldSessionID holds the string denoting the session_id field in the database.
	FieldSessionID = "session_id"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldAccessTokenExpirationAt holds the string denoting the access_token_expiration_at field in the database.
	FieldAccessTokenExpirationAt = "access_token_expiration_at"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldRefreshTokenExpirationAt holds the string denoting the refresh_token_expiration_at field in the database.
	FieldRefreshTokenExpirationAt = "refresh_token_expiration_at"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldAgent holds the string denoting the agent field in the database.
	FieldAgent = "agent"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastActivityAt holds the string denoting the last_activity_at field in the database.
	FieldLastActivityAt = "last_activity_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the session in the database.
	Table = "sessions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "sessions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for session fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldSessionID,
	FieldAccessToken,
	FieldAccessTokenExpirationAt,
	FieldRefreshToken,
	FieldRefreshTokenExpirationAt,
	FieldIP,
	FieldAgent,
	FieldCreatedAt,
	FieldLastActivityAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSessionID holds the default value on creation for the "session_id" field.
	DefaultSessionID func() uuid.UUID
	// IPValidator is a validator for the "ip" field. It is called by the builders before save.
	IPValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastActivityAt holds the default value on creation for the "last_activity_at" field.
	DefaultLastActivityAt func() time.Time
	// UpdateDefaultLastActivityAt holds the default value on update for the "last_activity_at" field.
	UpdateDefaultLastActivityAt func() time.Time
)
