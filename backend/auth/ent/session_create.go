// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Z00mZE/cortex/backend/auth/ent/schema"
	"github.com/Z00mZE/cortex/backend/auth/ent/session"
	"github.com/Z00mZE/cortex/backend/auth/ent/user"
	"github.com/google/uuid"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *SessionCreate) SetUserID(i int) *SessionCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUserID(i *int) *SessionCreate {
	if i != nil {
		sc.SetUserID(*i)
	}
	return sc
}

// SetSessionID sets the "session_id" field.
func (sc *SessionCreate) SetSessionID(u uuid.UUID) *SessionCreate {
	sc.mutation.SetSessionID(u)
	return sc
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (sc *SessionCreate) SetNillableSessionID(u *uuid.UUID) *SessionCreate {
	if u != nil {
		sc.SetSessionID(*u)
	}
	return sc
}

// SetAccessToken sets the "access_token" field.
func (sc *SessionCreate) SetAccessToken(s string) *SessionCreate {
	sc.mutation.SetAccessToken(s)
	return sc
}

// SetAccessTokenExpirationAt sets the "access_token_expiration_at" field.
func (sc *SessionCreate) SetAccessTokenExpirationAt(t time.Time) *SessionCreate {
	sc.mutation.SetAccessTokenExpirationAt(t)
	return sc
}

// SetRefreshToken sets the "refresh_token" field.
func (sc *SessionCreate) SetRefreshToken(s string) *SessionCreate {
	sc.mutation.SetRefreshToken(s)
	return sc
}

// SetRefreshTokenExpirationAt sets the "refresh_token_expiration_at" field.
func (sc *SessionCreate) SetRefreshTokenExpirationAt(t time.Time) *SessionCreate {
	sc.mutation.SetRefreshTokenExpirationAt(t)
	return sc
}

// SetIP sets the "ip" field.
func (sc *SessionCreate) SetIP(s *schema.Inet) *SessionCreate {
	sc.mutation.SetIP(s)
	return sc
}

// SetAgent sets the "agent" field.
func (sc *SessionCreate) SetAgent(s string) *SessionCreate {
	sc.mutation.SetAgent(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SessionCreate) SetCreatedAt(t time.Time) *SessionCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetLastActivityAt sets the "last_activity_at" field.
func (sc *SessionCreate) SetLastActivityAt(t time.Time) *SessionCreate {
	sc.mutation.SetLastActivityAt(t)
	return sc
}

// SetNillableLastActivityAt sets the "last_activity_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableLastActivityAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetLastActivityAt(*t)
	}
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SessionCreate) SetUser(u *User) *SessionCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	var (
		err  error
		node *Session
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.SessionID(); !ok {
		v := session.DefaultSessionID()
		sc.mutation.SetSessionID(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := session.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.LastActivityAt(); !ok {
		v := session.DefaultLastActivityAt()
		sc.mutation.SetLastActivityAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "Session.session_id"`)}
	}
	if _, ok := sc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "Session.access_token"`)}
	}
	if _, ok := sc.mutation.AccessTokenExpirationAt(); !ok {
		return &ValidationError{Name: "access_token_expiration_at", err: errors.New(`ent: missing required field "Session.access_token_expiration_at"`)}
	}
	if _, ok := sc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "Session.refresh_token"`)}
	}
	if _, ok := sc.mutation.RefreshTokenExpirationAt(); !ok {
		return &ValidationError{Name: "refresh_token_expiration_at", err: errors.New(`ent: missing required field "Session.refresh_token_expiration_at"`)}
	}
	if _, ok := sc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Session.ip"`)}
	}
	if v, ok := sc.mutation.IP(); ok {
		if err := session.IPValidator(v.String()); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Session.ip": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Agent(); !ok {
		return &ValidationError{Name: "agent", err: errors.New(`ent: missing required field "Session.agent"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Session.created_at"`)}
	}
	if _, ok := sc.mutation.LastActivityAt(); !ok {
		return &ValidationError{Name: "last_activity_at", err: errors.New(`ent: missing required field "Session.last_activity_at"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: session.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: session.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.SessionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: session.FieldSessionID,
		})
		_node.SessionID = value
	}
	if value, ok := sc.mutation.AccessToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldAccessToken,
		})
		_node.AccessToken = value
	}
	if value, ok := sc.mutation.AccessTokenExpirationAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldAccessTokenExpirationAt,
		})
		_node.AccessTokenExpirationAt = value
	}
	if value, ok := sc.mutation.RefreshToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldRefreshToken,
		})
		_node.RefreshToken = value
	}
	if value, ok := sc.mutation.RefreshTokenExpirationAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldRefreshTokenExpirationAt,
		})
		_node.RefreshTokenExpirationAt = value
	}
	if value, ok := sc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := sc.mutation.Agent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldAgent,
		})
		_node.Agent = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.LastActivityAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldLastActivityAt,
		})
		_node.LastActivityAt = value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
